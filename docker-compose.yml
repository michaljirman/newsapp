version: "3"
networks:
  backend:

services:
  apigatewaysvc:
    build:
      context: .
      dockerfile: ./apigateway-service/apigatewaysvc.Dockerfile
    image: michaljirman/apigatewaysvc
    container_name: apigatewaysvc
    ports:
      - 8801:8081
    depends_on: 
      - "newsfeedersvc-postgres"
      - "newsfeedersvc"
    environment:
      - SVC_NAME=apigatewaysvc
      - DEBUG_ADDRESS=:8080
      - HTTP_ADDRESS=:8081
      - NEWSFEEDERSVC=newsfeedersvc:8082
      - LOG_LEVEL=debug
    restart: on-failure
    networks:
      - backend

  newsfeedersvc:
    build:
      context: .
      dockerfile: ./newsfeeder-service/newsfeedersvc.Dockerfile
    image: michaljirman/newsfeedersvc
    container_name: newsfeedersvc
    ports:
      - 8802:8082
    depends_on: 
      - "newsfeedersvc-postgres"
    environment: 
      - SVC_NAME=newsfeedersvc
      - DEBUG_ADDRESS=:8080
      - GRPC_ADDRESS=:8082
      - URLBOX_API_URL=https://api.urlbox.io/v1/
      - URLBOX_API_TOKEN=TFb7yVm5aCzXBXhD
      - URLBOX_API_SECRET=
      - LOG_LEVEL=debug
      - DB_HOST=newsfeedersvc-postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=postgres
      - DB_MAX_OPEN_CONNS=20
      - DB_MAX_IDLE_CONNS=10
      - DB_CONN_MAX_LIFETIME=120
      - DB_LOCK_TIMEOUT=1000
      - MIGRATIONS_DIRECTORY_PATH=/migrations
    restart: on-failure
    networks:
      - backend

  newsfeedersvc-postgres:
    image: postgres
    networks:
      - backend
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgresql:/var/lib/postgresql
      # This needs explicit mapping due to https://github.com/docker-library/postgres/blob/4e48e3228a30763913ece952c611e5e9b95c8759/Dockerfile.template#L52
      - postgresql_data:/var/lib/postgresql/data
    ports: 
      - 15432:5432

volumes:
  postgresql:
  postgresql_data: